# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IbcelCYB3INdg7f_IDUJ9vSdFBfTzu-w
"""

# prompt: generate upper code correctly

import tensorflow as tf
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

inception_v3 = tf.keras.applications.inception_v3.InceptionV3(include_top=False, weights='imagenet')

def load_img(img_path):
  img = tf.io.read_file(img_path)
  img = tf.image.decode_jpeg(img, channels=3)
  img = tf.keras.layers.Resizing(299, 299)(img)
  img = img / 255.0
  return img

  def get_feature_vector(img_path):
    img = load_img(img_path)
    img = tf.expand_dims(img, 0)
    feature_vector = inception_v3(img)
    return feature_vector,img

import tensorflow as tf
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

inception_v3 = tf.keras.applications.inception_v3.InceptionV3(include_top=False, weights='imagenet')

def load_img(img_path):
  img = tf.io.read_file(img_path)
  img = tf.image.decode_jpeg(img, channels=3)
  img = tf.keras.layers.Resizing(299, 299)(img)
  # Convert the image to float32 before preprocessing
  img = tf.cast(img, tf.float32)
  img = tf.keras.applications.inception_v3.preprocess_input(img)
  return img

def get_feature_vector(img_path):
  img = load_img(img_path)
  img = tf.expand_dims(img, 0)
  feature_vector = inception_v3(img)
  return feature_vector, img

image_path = '/content/img1.jpg'  # Replace with the actual path to your image
feature_vector, image = get_feature_vector(image_path)

# Clipping pixel values to the valid range for display with Matplotlib
image_for_display = np.clip(np.squeeze(image, axis=0), 0, 1)

plt.imshow(image_for_display)
plt.axis('off')
plt.show()

print()
print('Input image size  :', image.shape)
print('Feature vector size:', feature_vector.shape)

from transformers import VisionEncoderDecoderModel, ViTImageProcessor, AutoTokenizer
import torch
from PIL import Image



model = VisionEncoderDecoderModel.from_pretrained("nlpconnect/vit-gpt2-image-captioning")
feature_extractor = ViTImageProcessor.from_pretrained("nlpconnect/vit-gpt2-image-captioning")
tokenizer = AutoTokenizer.from_pretrained("nlpconnect/vit-gpt2-image-captioning")

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model.to(device)

max_length = 16
num_beams = 4
gen_kwargs = {"max_length": max_length, "num_beams": num_beams}


def predict_step(image_paths):
  images = []
  for image_path in image_paths:
    i_image = Image.open(image_path)
    if i_image.mode != "RGB":
      i_image = i_image.convert(mode="RGB")

    images.append(i_image)

  pixel_values = feature_extractor(images=images, return_tensors="pt").pixel_values
  pixel_values = pixel_values.to(device)

  output_ids = model.generate(pixel_values, **gen_kwargs)

  preds = tokenizer.batch_decode(output_ids, skip_special_tokens=True)
  preds = [pred.strip() for pred in preds]
  return preds


predict_step(['/content/img1.jpg'])